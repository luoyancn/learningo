// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/oceanstack/rpc/req.proto

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Req                  string   `protobuf:"bytes,1,opt,name=req" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_req_5ec34a61f374bbe8, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetReq() string {
	if m != nil {
		return m.Req
	}
	return ""
}

type Response struct {
	Resp                 string   `protobuf:"bytes,1,opt,name=resp" json:"resp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_req_5ec34a61f374bbe8, []int{1}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetResp() string {
	if m != nil {
		return m.Resp
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "rpc.Request")
	proto.RegisterType((*Response)(nil), "rpc.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReQRePClient is the client API for ReQReP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReQRePClient interface {
	GetResp(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Cast(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error)
	StreamReq(ctx context.Context, opts ...grpc.CallOption) (ReQReP_StreamReqClient, error)
	StreamRep(ctx context.Context, in *Request, opts ...grpc.CallOption) (ReQReP_StreamRepClient, error)
	StreamReqRep(ctx context.Context, opts ...grpc.CallOption) (ReQReP_StreamReqRepClient, error)
}

type reQRePClient struct {
	cc *grpc.ClientConn
}

func NewReQRePClient(cc *grpc.ClientConn) ReQRePClient {
	return &reQRePClient{cc}
}

func (c *reQRePClient) GetResp(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.ReQReP/GetResp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reQRePClient) Cast(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/rpc.ReQReP/Cast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reQRePClient) StreamReq(ctx context.Context, opts ...grpc.CallOption) (ReQReP_StreamReqClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReQReP_serviceDesc.Streams[0], "/rpc.ReQReP/StreamReq", opts...)
	if err != nil {
		return nil, err
	}
	x := &reQRePStreamReqClient{stream}
	return x, nil
}

type ReQReP_StreamReqClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type reQRePStreamReqClient struct {
	grpc.ClientStream
}

func (x *reQRePStreamReqClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *reQRePStreamReqClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reQRePClient) StreamRep(ctx context.Context, in *Request, opts ...grpc.CallOption) (ReQReP_StreamRepClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReQReP_serviceDesc.Streams[1], "/rpc.ReQReP/StreamRep", opts...)
	if err != nil {
		return nil, err
	}
	x := &reQRePStreamRepClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReQReP_StreamRepClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type reQRePStreamRepClient struct {
	grpc.ClientStream
}

func (x *reQRePStreamRepClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *reQRePClient) StreamReqRep(ctx context.Context, opts ...grpc.CallOption) (ReQReP_StreamReqRepClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReQReP_serviceDesc.Streams[2], "/rpc.ReQReP/StreamReqRep", opts...)
	if err != nil {
		return nil, err
	}
	x := &reQRePStreamReqRepClient{stream}
	return x, nil
}

type ReQReP_StreamReqRepClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type reQRePStreamReqRepClient struct {
	grpc.ClientStream
}

func (x *reQRePStreamReqRepClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *reQRePStreamReqRepClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ReQReP service

type ReQRePServer interface {
	GetResp(context.Context, *Request) (*Response, error)
	Cast(context.Context, *Request) (*empty.Empty, error)
	StreamReq(ReQReP_StreamReqServer) error
	StreamRep(*Request, ReQReP_StreamRepServer) error
	StreamReqRep(ReQReP_StreamReqRepServer) error
}

func RegisterReQRePServer(s *grpc.Server, srv ReQRePServer) {
	s.RegisterService(&_ReQReP_serviceDesc, srv)
}

func _ReQReP_GetResp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReQRePServer).GetResp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ReQReP/GetResp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReQRePServer).GetResp(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReQReP_Cast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReQRePServer).Cast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ReQReP/Cast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReQRePServer).Cast(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReQReP_StreamReq_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReQRePServer).StreamReq(&reQRePStreamReqServer{stream})
}

type ReQReP_StreamReqServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type reQRePStreamReqServer struct {
	grpc.ServerStream
}

func (x *reQRePStreamReqServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *reQRePStreamReqServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ReQReP_StreamRep_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReQRePServer).StreamRep(m, &reQRePStreamRepServer{stream})
}

type ReQReP_StreamRepServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type reQRePStreamRepServer struct {
	grpc.ServerStream
}

func (x *reQRePStreamRepServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _ReQReP_StreamReqRep_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReQRePServer).StreamReqRep(&reQRePStreamReqRepServer{stream})
}

type ReQReP_StreamReqRepServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type reQRePStreamReqRepServer struct {
	grpc.ServerStream
}

func (x *reQRePStreamReqRepServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *reQRePStreamReqRepServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ReQReP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ReQReP",
	HandlerType: (*ReQRePServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResp",
			Handler:    _ReQReP_GetResp_Handler,
		},
		{
			MethodName: "Cast",
			Handler:    _ReQReP_Cast_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamReq",
			Handler:       _ReQReP_StreamReq_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamRep",
			Handler:       _ReQReP_StreamRep_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamReqRep",
			Handler:       _ReQReP_StreamReqRep_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "src/oceanstack/rpc/req.proto",
}

func init() { proto.RegisterFile("src/oceanstack/rpc/req.proto", fileDescriptor_req_5ec34a61f374bbe8) }

var fileDescriptor_req_5ec34a61f374bbe8 = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8e, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x09, 0xbb, 0xec, 0xba, 0xc3, 0x0a, 0x32, 0x07, 0x91, 0xad, 0x88, 0xf4, 0x20, 0x45,
	0x24, 0x29, 0xfa, 0x08, 0x22, 0x5e, 0x35, 0x3e, 0x41, 0x1a, 0xc6, 0x1e, 0xb4, 0x4d, 0x32, 0x49,
	0x0f, 0x3e, 0xb1, 0xaf, 0x21, 0x6d, 0xa3, 0x88, 0x87, 0x7a, 0xfb, 0x93, 0xf9, 0xf8, 0xf8, 0xe0,
	0x3c, 0xb2, 0x55, 0xce, 0x92, 0xe9, 0x63, 0x32, 0xf6, 0x4d, 0xb1, 0xb7, 0x8a, 0x29, 0x48, 0xcf,
	0x2e, 0x39, 0x5c, 0xb1, 0xb7, 0x87, 0xa2, 0x75, 0xae, 0x7d, 0x27, 0x35, 0x7d, 0x35, 0xc3, 0xab,
	0xa2, 0xce, 0xa7, 0x8f, 0x99, 0x28, 0x0b, 0xd8, 0x6a, 0x0a, 0x03, 0xc5, 0x84, 0x27, 0xb0, 0x62,
	0x0a, 0x67, 0xe2, 0x52, 0x54, 0x3b, 0x3d, 0xce, 0xf2, 0x02, 0x8e, 0x34, 0x45, 0xef, 0xfa, 0x48,
	0x88, 0xb0, 0x66, 0x8a, 0x3e, 0x9f, 0xa7, 0x7d, 0xfb, 0x29, 0x60, 0xa3, 0xe9, 0x59, 0xd3, 0x13,
	0x5e, 0xc1, 0xf6, 0x91, 0xd2, 0x48, 0xe3, 0x5e, 0xb2, 0xb7, 0x32, 0x5b, 0x0f, 0xc7, 0xf9, 0x95,
	0x35, 0x37, 0xb0, 0xbe, 0x37, 0x31, 0xfd, 0x81, 0x4e, 0xe5, 0xdc, 0x28, 0xbf, 0x1b, 0xe5, 0xc3,
	0xd8, 0x88, 0xd7, 0xb0, 0x7b, 0x49, 0x4c, 0xa6, 0xd3, 0x14, 0x16, 0xbd, 0x95, 0xf8, 0xcd, 0x2e,
	0x37, 0xd4, 0x02, 0x15, 0xec, 0x7f, 0xbc, 0xff, 0xe1, 0x95, 0xa8, 0x45, 0xb3, 0x99, 0xc2, 0xee,
	0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x1f, 0x79, 0x97, 0x6f, 0x01, 0x00, 0x00,
}
